@model HicFarketmezBank.Models.Kullanici

@{
    ViewBag.Title = "AddOrEdit";
}
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="stylesheet" href="~/Content/bootstrap.min.css">
    <script src="~/Scripts/jquery-3.4.1.slim.min.js"></script>
    <script src="~/Scripts/popper.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans&display=swap" rel="stylesheet">
    <script src="~/Content/filter.js"></script>
    <link href="~/Content/responsive.css" rel="stylesheet" />
    <title>Kayıt</title>
    <style>
        /* {
            width: 100%;
            height: 100%;3
            padding: 0; margin: 0;
         }*/
        #canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }
        /*div {
            position: absolute;
            top: 0; left: 0;
         }*/
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    <div id="altBG"></div>

    <script src="~/Content/triangles.js"></script>
    <script>
        var canvas = document.getElementById("canvas");
        var altBG = document.getElementById("altBG");
        var triangle = new TriangleBG({
            canvas: canvas,
            alternateElem: altBG,
            cellHeight: 90,
            cellWidth: 75,
            mouseLight: true,
            mouseLightRadius: 100,
            mouseLightIncrement: 10,
            resizeAdjustment: true,
            variance: 1.5,
            pattern: "x*y",
            baseColor1: {
                baseHue: 1,
                baseSaturation: 1,
                baseLightness: 2
            },
            baseColor2: {
                baseHue: 1,
                baseSaturation: 1,
                baseLightness: 1
            },
            colorDelta: {
                hue: 1,
                lightness: 0,
                saturation: 0
            }
        });
    </script>
    <div class="container">
        <form class="p-4 mx-auto  bg-dark rounded shadow needs-validation" method="POST" novalidate>
            <h2 class="mb-3 text-center text-light">Banka</h2>
            <div class="form-group">
                @Html.EditorFor(model => model.kullanıcıadı, new { htmlAttributes = new {
                @id="TCno",
                @class="form-control", 
                @type="text" ,
                @name="tc" ,
                @placeholder="Kullanıcı Adı",
                @oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);",
                @maxlength="11",
                @minlength="3",
                @required="True"
                } })
                <div class="invalid-feedback">Bu alan boş bırakılamaz!</div>
            </div>
            <div class="form-group">
                <div class="input-group">
                    @Html.EditorFor(model => model.isim, new { htmlAttributes = new {
                    @id="Ad" ,
                   @class="form-control" ,
                   @type="text" ,
                   @name="isim" ,
                   @placeholder="Ad",
                   @oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);",  
                   @maxlength="20",
                   @minlength="2",
                   @required="True"
                    } })
                    <div class="invalid-feedback">Bu alan boş bırakılamaz!</div>
                    @Html.EditorFor(model => model.soyisim, new { htmlAttributes = new {
                    @id="Soyad", 
                   @class="form-control", 
                   @type="text", 
                   @name="soyisim", 
                   @placeholder="Soyad",
                   @oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);", 
                   @maxlength="30",
                   @minlength="2",
                   @required="True"
                   } })
                    <div class="invalid-feedback">Bu alan boş bırakılamaz!</div>
                </div>
            </div>
            <div class="form-group">
                @Html.EditorFor(model => model.telefon, new { htmlAttributes = new {
                @id="TLF" , 
               @class="form-control" ,
               @type="text" ,
               @name="user" ,
               @placeholder="Telefon numarası",         
               @oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);", 
               @minlength="11" ,
               @maxlength="11",
               @required="True"
                } })
                <div class="invalid-feedback">Bu alan boş bırakılamaz!</div>
            </div>
            <div class="form-group">
                @Html.EditorFor(model => model.parola, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   @type = "password",
                   @name = "password",
                   @placeholder = "Şifre",
                   @oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);",
                   @maxlength = "16",
                   @minlength="6",
                   @required="True"
               }
           })
                <div class="invalid-feedback">Bu alan boş bırakılamaz!</div>
            </div>

            <div class="form-group float-left">
                <a class="text-muted p-1 text-light" href="/User/Login" style="font-size: 16px;">Giriş Yap</a>
            </div>
            <div  class="form-group text-right">
                <button  type="submit" class="btn btn-secondary">Kayıt Ol</button>
            </div>
        </form>
    </div>
    <script type="text/javascript">
        setInputFilter(document.getElementById("TLF"), function (value) {
            return /^\d*\.?\d*$/.test(value);
        });
        setInputFilter(document.getElementById("Ad"), function (value) {
            return /^[a-z\u00c0-\u024f]*$/i.test(value);
        });
        setInputFilter(document.getElementById("Soyad"), function (value) {
            return /^[a-z\u00c0-\u024f]*$/i.test(value);
        });
    </script>
    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
</body>
</html>